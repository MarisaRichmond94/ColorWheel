"""Chalice response functionality."""
# pylint: disable=too-many-arguments,super-init-not-called
import json
from typing import Union
import six

from chalice import Response as ChaliceResponse
from loguru import logger as log

from restless_services.authentication.business import refresh_authorization
from settings import app as app_settings


class Response(ChaliceResponse):
    """Builds a Chalice response from the given info."""
    def __init__(
        self,
        data: dict = None,
        headers: dict = None,
        message: str = 'success',
        origin: str = '',
        status_code: int = 200,
    ) -> None:
        self.body = dict(status_code=status_code, message=message)
        if data is not None:
            self.body['data'] = data
        self.headers = headers or {}
        if origin:
            self.origin = origin.lower()
            whitelist = app_settings.CORS_WHITELIST.lower()
            if self.origin in whitelist:
                self.headers['Access-Control-Allow-Origin'] = self.origin
            else:
                log.info(f'WARNING: Origin not found in  CORS whitelist: "{self.origin}"')
        else:
            log.info(f'WARNING: No Origin provided: "{origin}"')
        self.status_code = 200
        if not isinstance(self.body, six.string_types):
            self.body = json.dumps(self.body)

    def __str__(self) -> str:
        return (
            f'Response(headers={self.headers}, status_code="{self.status_code}", body={self.body})'
        )


def generate_success_response(
    session: any,
    request: object,
    data: Union[dict, list],
    api_key_required: bool = True,
) -> Response:
    """Generates a successful response using given input.

    Args:
        session: The current database session.
        request: The parsed request object returned from request validation.
        data: The response from the api.
        api_key_required: Whether or not authentication was required.

    Returns:
        A Response generated by Chalice.
    """
    if api_key_required:
        data = {
            'data': data,
            'auth_results': refresh_authorization(
                session,
                email=request.headers.get('email')
            ),
        }
    return Response(
        data=data,
        origin=request.headers.get('origin', ''),
    )


def generate_fail_response(path: str, current_request: dict,) -> Response:
    """Generates a failed api response using given inputs.

    Args:
        path: The api path that failed.
        current_request: The current API request containing the origin headers.

    Returns:
        A Response generated by Chalice.
    """
    return Response(
        status_code=500,
        message=f'An error occurred  in the "{path}" API.',
        origin=current_request.headers.get('origin', '')
    )
