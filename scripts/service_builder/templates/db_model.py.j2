"""The database model for the {{args.table_type}}_{{args.plural_service_name}} table."""
{% for file_import in imports %}
{{file_import}}
{% endfor %}


{% if args.table_type == 'fct' %}
{% if args.foreign_dims and args.table_type == 'fct' %}
{% for _, foreign_dim in args.foreign_dims.items() %}
@Dim{{foreign_dim.plural_schema}}.dimension
{% endfor %}
{% endif %}
{% endif %}
class {{args.table_type.capitalize()}}{{args.plural_schema_name}}(Base):
    """SQLAlchemy object for the {{args.table_type}}_{{args.plural_service_name}} table."""
    __tablename__ = '{{args.table_type}}_{{args.plural_service_name}}'
    {% if args.dimensions %}
    {% for _, dimension in args.dimensions.items() %}
    {{dimension.key}} = Column({{dimension.sqlalchemy_type}}(), nullable={% if dimension.is_required %}False{% else %}True{% endif %}, unique={% if dimension.is_unique %}True{% else %}False{% endif %})
    {% endfor %}
    {% endif %}
{% if args.table_type == 'dim' %}

    @classmethod
    def dimension(cls, target):
        """Class for creating a relationship to the {{args.table_type}}_{{args.plural_service_name}} table."""
        target.{{args.table_type}}_{{args.singular_service_name}}_id = Column(
            '{{args.table_type}}_{{args.singular_service_name}}_id',
            UUID(as_uuid=True),
            ForeignKey({{args.table_type.capitalize()}}{{args.plural_schema_name}}.id),
            nullable=False,
        )
        target.{{args.table_type}}_{{args.singular_service_name}} = relationship(cls)
        return target
    {% endif %}
    {% if args.table_type == 'fct' %}
{% endif %}
